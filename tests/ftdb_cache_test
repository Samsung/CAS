#!/usr/bin/env python3
import argparse
import gc
import json
import os
import random
import re
import sys
import time
import traceback

import libftdb

##############
# Utilities
##############
samplesSize = 2000
stressSize = 30000

def getMemUsage() -> int:
	with open("/proc/self/status", "r") as f:
		content = f.readlines()
		content = next(filter(lambda line: line.startswith('VmRSS:'), content), '')
		return int(re.findall(r'\d+', content)[0]) * 1024


##############
# Test cases
##############
# Step 1: Compare top-level fields
def testTopLevelFields():
	print("checking top level fields", end='')
	topLevelFields = [
		"source_info", "module_info", "funcs_tree_calls_no_asm",
		"funcs_tree_calls_no_known", "funcs_tree_calls_no_known_no_asm", "funcs_tree_func_calls", 
		"funcs_tree_func_refs", "funcs_tree_funrefs_no_asm", "funcs_tree_funrefs_no_known", 
		"funcs_tree_funrefs_no_known_no_asm", "globs_tree_globalrefs", "types_tree_refs", 
		"types_tree_usedrefs", "static_funcs_map", "init_data", "known_data", "BAS",
		"version", "module", "directory", "release", 
		# TODO: "funcdecln", "typen", "sourcen", "globaln", "unresolvedfuncn", "funcn", "fopn"
	]

	for field in topLevelFields:
		if field not in db:
			continue
		assert(field in ftdb)
		assert(db[field] == ftdb[field])
		assert db[field] == getattr(ftdb, field), f'Field "{field}" content mismatch - {db[field]} vs {getattr(ftdb, field)}'
	
	# Manually check some special files
	assert(db['sources'] == ftdb['sources'])
	assert(len(db['sources']) == len(ftdb.sources))
	assert(db['unresolvedfuncs'] == ftdb['unresolvedfuncs'])
	assert(len(db['unresolvedfuncs']) == len(ftdb.unresolvedfuncs))


# Step 2: Test functions
def testFuncs():
	if args.skip_function_tests or args.skip_function_member_tests:
		return
	
	print("checking function entries in FTDB", end='')
	for i, f in enumerate(random.sample(db["funcs"], k=samplesSize)):

		func_id = f["id"]
		for field in f:
			if type(f[field]) is list or type(f[field]) is dict:
				continue
			attrName = {'class': 'classname', 'linkage': 'linkage_string'}.get(field, field)
			assert(field in ftdb.funcs[func_id])
			assert f[field] == ftdb.funcs[func_id][field], f'Field "{field}" content mismatch in function fid={func_id}'
			assert f[field] == getattr(ftdb.funcs[func_id], attrName), f'Field "{field} content mismatch in function fid={func_id} - {f[field]} vs {getattr(ftdb.funcs[func_id], attrName)}'

		assert f["calls"]==ftdb.funcs[f["id"]].calls
		assert(f["callrefs"] == ftdb.funcs[func_id].callrefs)
		assert(f["refcalls"] == ftdb.funcs[func_id].refcalls)
		assert(f["refcallrefs"] == ftdb.funcs[func_id].refcallrefs)
		assert(f["csmap"] == ftdb.funcs[func_id].csmap)
		assert sorted(f["taint"].items()) == sorted(ftdb.funcs[f["id"]].taint.items())
		
		for i, ci in enumerate(f["call_info"]):
			for field in ci:
				assert(field in ftdb.funcs[func_id].call_info[i])
				assert(ci[field] == getattr(ftdb.funcs[func_id].call_info[i], field))
				assert(ci[field] == ftdb.funcs[func_id].call_info[i][field])
		for i, ci in enumerate(f["refcall_info"]):
			for field in ci:
				assert(field in ftdb.funcs[func_id].refcall_info[i])
				assert(ci[field] == getattr(ftdb.funcs[func_id].refcall_info[i], field))
				assert(ci[field] == ftdb.funcs[func_id].refcall_info[i][field])

		for u,S in enumerate(f["switches"]):
			assert(S["cases"] == ftdb.funcs[func_id].switches[u].cases)
			assert(S["condition"]==ftdb.funcs[f["id"]].switches[u].condition)

		for u,L in enumerate(f["locals"]):
			for field in L:
				assert(field in ftdb.funcs[func_id].locals[u])
				assert(L[field] == getattr(ftdb.funcs[func_id].locals[u], field))
				assert(L[field] == ftdb.funcs[func_id].locals[u][field])
		
		for u,D in enumerate(f["derefs"]):
			for field in filter(lambda x: x != 'offsetrefs', D):
				attrname = field if field != 'kind' else 'kindname'
				assert(field in ftdb.funcs[f["id"]].derefs[u])
				assert(D[field] == getattr(ftdb.funcs[f["id"]].derefs[u], attrname))
				assert(D[field] == ftdb.funcs[f["id"]].derefs[u][field])
			
			for n,oref in enumerate(D["offsetrefs"]):
				assert oref["kind"]==ftdb.funcs[f["id"]].derefs[u].offsetrefs[n].kindname
				assert oref["id"]==ftdb.funcs[f["id"]].derefs[u].offsetrefs[n].id
				if "mi" in oref:
					assert oref["mi"]==ftdb.funcs[f["id"]].derefs[u].offsetrefs[n].mi
				if "di" in oref:
					assert oref["di"]==ftdb.funcs[f["id"]].derefs[u].offsetrefs[n].di
				if "cast" in oref:
					assert oref["cast"]==ftdb.funcs[f["id"]].derefs[u].offsetrefs[n].cast
		for u,F in enumerate(f["ifs"]):
			assert F["refs"]==ftdb.funcs[f["id"]].ifs[u].refs
			assert F["csid"]==ftdb.funcs[f["id"]].ifs[u].csid
		assert f["asm"]==ftdb.funcs[f["id"]].asms
		assert f["globalrefs"]==ftdb.funcs[f["id"]].globalrefs
		assert f["globalrefInfo"]==ftdb.funcs[f["id"]].globalrefInfo
		assert f["funrefs"]==ftdb.funcs[f["id"]].funrefs
		assert f["refs"]==ftdb.funcs[f["id"]].refs
		assert f["decls"]==ftdb.funcs[f["id"]].decls
		assert f["types"]==ftdb.funcs[f["id"]].types


# Step 3: Test types entries
def testTypes():
	print("checking type entries in FTDB", end='')

	for i,T in enumerate(random.sample(db["types"], k=samplesSize)):
		for field in T:
			type_id = T["id"]
			attrName = {'class': 'classname', 'def': 'defstring'}.get(field, field)
			assert(field in ftdb.types[type_id])
			assert(T[field] == ftdb.types[type_id][field])
			assert(T[field] == getattr(ftdb.types[type_id], attrName))

# Step 4: Test globals entries
def testGlobals():
	print("checking global entries in FTDB", end='')
	for g in random.sample(db["globals"], k=samplesSize):
		for field in g:
			attrName = {'class': 'classname', 'def': 'defstring', 'linkage': 'linkage_string'}.get(field, field)
			assert(field in ftdb.globals[g['id']])
			assert(g[field] == ftdb.globals[g['id']][field])
			assert g[field] == getattr(ftdb.globals[g['id']], attrName), f'Field "{attrName}" content mismatch - {g[field]} vs {getattr(ftdb.globals[g["id"]], attrName)}'

# Step 5: Test funcdecls
def testFuncdecls():
	print("checking function declarations", end='')

	for fd in random.sample(db["funcdecls"], k=samplesSize):
		for field in fd:
			attrName = {'linkage': 'linkage_string'}.get(field, field)
			assert(field in ftdb.funcdecls[fd['id']])
			assert(fd[field] == ftdb.funcdecls[fd['id']][field])
			assert fd[field] == getattr(ftdb.funcdecls[fd['id']], attrName), f'Field "{field}" content mismatch - {fd[field]} vs {getattr(ftdb.funcdecls[fd["id"]], attrName)}'

# Step 6: Test fops
def testFops():
	print("checking fops entries in FTDB", end='')
	# assert db["fopn"] == ftdb["fopn"]

	for i,v in enumerate(db["fops"]):
		assert v["kind"]==ftdb.fops[i].kind
		assert v["type"]==ftdb.fops[i].type
		assert v["var"]==ftdb.fops[i].var
		assert v["func"]==ftdb.fops[i].func
		assert sorted(v["members"].items()) == sorted(ftdb.fops[i].members.items())
		assert v["loc"]==ftdb.fops[i].loc

# Step 7:
def testFTDBApi():
	print("testing FTDB API functions", end='')
	for test_func in random.sample(db['funcs'], k=samplesSize):
		# Test getters
		assert ftdb.funcs.contains_id(test_func['id'])
		assert ftdb.funcs.entry_by_id(test_func['id'])['hash'] == test_func['hash']

		assert ftdb.funcs.contains_hash(test_func['hash'])
		assert ftdb.funcs.entry_by_hash(test_func['hash'])['hash'] == test_func['hash']

		assert ftdb.funcs.contains_name(test_func['name'])
		assert len(ftdb.funcs.entry_by_name(test_func['name'])) > 0

		# Test ftdbFuncEntry object
		ftdbFunc = ftdb.funcs.entry_by_id(test_func['id'])
		assert set(ftdbFunc.json().keys()) == set(test_func.keys()), f'Missing fields in JSON representation of ftdbFuncEntry - {ftdbFunc.json().keys()} vs {test_func.keys()}'
		assert ftdbFunc.has_namespace() == ('namespace' in test_func), f'Method "has_namespace" returned {ftdbFunc.has_namespace()} vs {"namespace" in test_func}({test_func.get("namespace")})'
		assert ftdbFunc.has_classOuterFn() == ('namespace' in test_func)
		assert ftdbFunc.has_class() == ('classOuterFn' in test_func)

	for test_decl in random.sample(db['funcdecls'], k=samplesSize):
		# Test getters
		assert ftdb.funcdecls.contains_id(test_decl['id'])
		assert ftdb.funcdecls.entry_by_id(test_decl['id'])['declhash'] == test_decl['declhash']

		assert ftdb.funcdecls.contains_hash(test_decl['declhash'])
		assert ftdb.funcdecls.entry_by_hash(test_decl['declhash'])['declhash'] == test_decl['declhash']

		assert ftdb.funcdecls.contains_name(test_decl['name'])
		assert len(ftdb.funcdecls.entry_by_name(test_decl['name'])) > 0

		# Test ftdbFuncdeclEntry object
		ftdbFuncDecl = ftdb.funcdecls.entry_by_id(test_decl['id'])
		assert ftdbFuncDecl.has_namespace() == ('namespace' in test_decl)
		assert ftdbFuncDecl.has_class() == ('class' in test_decl)
		assert set(ftdbFuncDecl.json().keys()) == set(test_decl.keys())

	for glob in random.sample(db['globals'], k=samplesSize):
		# Test getters
		assert ftdb.globals.contains_id(glob['id'])
		assert ftdb.globals.entry_by_id(glob['id'])['hash'] == glob['hash']

		assert ftdb.globals.contains_hash(glob['hash'])
		assert ftdb.globals.entry_by_hash(glob['hash'])['hash'] == glob['hash']

		assert ftdb.globals.contains_name(glob['name'])
		assert len(ftdb.globals.entry_by_name(glob['name'])) > 0

		# Test ftdbGlobalEntry object
		ftdbGlobal = ftdb.globals.entry_by_id(glob['id'])
		assert ftdbGlobal.has_init() == ('hasinit' in glob and glob['hasinit'])
		assert set(ftdbGlobal.json().keys()) == set(glob.keys())

	for typeEntry in random.sample(db['types'], k=samplesSize):
		# Test getters
		assert ftdb.types.contains_id(typeEntry['id'])
		assert ftdb.types.entry_by_id(typeEntry['id'])['hash'] == typeEntry['hash']

		assert ftdb.types.contains_hash(typeEntry['hash'])
		assert ftdb.types.entry_by_hash(typeEntry['hash'])['hash'] == typeEntry['hash']

		# Test ftdbTypeEntry object
		ftdbType = ftdb.types.entry_by_id(typeEntry['id'])
		assert set(ftdbType.json().keys()) == set(typeEntry.keys())
		assert ftdbType.has_usedrefs() == ('usedrefs' in typeEntry)
		assert ftdbType.has_decls() == ('decls' in typeEntry)
		assert ftdbType.has_attrs() == ('attrnum' in typeEntry and typeEntry['attrnum'] > 0)
		assert ftdbType.has_outerfn() == ('outerfn' in typeEntry)
		assert ftdbType.has_location() == ('location' in typeEntry)
		assert ftdbType.isConst() is not None
		assert ftdbType.toNonConst() is not None

# Step 8: Stress / memory test
def stressTest():
	print("stress testing FTDB methods", end='')

	# Stress ftdb
	def stressRun():
		for i in range(stressSize // 2):
			if not ftdb.funcs.contains_id(i):
				continue
			func = ftdb.funcs.entry_by_id(i)
			func.json()
			func.hash
			if len(func.derefs) > 0:
				func.derefs[0].json()
			
			func.declbody
			func.refcallrefs
			func.body

			if not ftdb.types.contains_id(i):
				continue
			type = ftdb.types.entry_by_id(i)
			type.json()
			type.hash
			type.isConst()
			type.toNonConst()
			type.str

			del func
			del type

	# 1st run to preallocate memory
	gc.collect()
	stressRun()
	gc.collect()

	# 2nd run
	preTestMemory = getMemUsage()
	stressRun()
	gc.collect()
	postTestMemory = getMemUsage()
	memDiffMB = (postTestMemory - preTestMemory) // 1024 // 1024
	if memDiffMB > 100:
		raise RuntimeError(f"Test failed - leaked more than 100MB of memory ({memDiffMB}MB)")


# Step 9: Test input validation
def testAPIErrors():
	print('testing API for errors handling', end='')
	try:
		ftdb.load(1)
	except:
		pass

	try:
		ftdb.load()
	except:
		pass

	try:
		ftdb.load(ftdb)
	except:
		pass


##############
# Test code
##############
def setupTest():
	global ftdb, db
	print("Loading input DB.JSON")
	with open(args.db_path,"rb") as f:
		db = json.loads(f.read())

	base, _ = os.path.splitext(args.db_path)
	dbimg_path = base + ".img"

	if args.do_ftdb_create or args.only_ftdb_create:
		print("Creating ftdb")
		libftdb.create_ftdb(db,dbimg_path,True)
		if args.only_ftdb_create:
			sys.exit(0)

	print("Loading FTDB")
	ftdb = libftdb.ftdb()
	ftdb.load(dbimg_path, quiet=True)

	fids = [f["id"] for f in db["funcs"]]
	assert(len(fids)==len(set(fids))),"%d vs %d"%(len(fids),len(set(fids)))
	assert len(fids) > 0


parser = argparse.ArgumentParser(description="MAIN_DESCRIPTION", formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument("--do-ftdb-create", action="store_true", help="Do create the ftdb cache along the way")
parser.add_argument("--skip-function-tests", action="store_true", help="Skip performing function tests")
parser.add_argument("--skip-function-member-tests", action="store_true", help="Skip performing function member tests")
parser.add_argument("--skip-function-mapping-tests", action="store_true", help="Skip performing function mapping tests")
parser.add_argument("--only-ftdb-create", action="store_true", help="Only create ftdb cache")
parser.add_argument('db_path', action="store")
args = parser.parse_args()

# Allow for easier reproduction
seed = random.randint(0, 100000)
random.seed(seed)
print(f'Initial random seed: {seed}')

setupTest()

gc.collect()
preTestsMemoryUse = getMemUsage()

# Run tests
failures = 0
tests = [
	testTopLevelFields, testFuncs, testTypes,
	testGlobals, testFuncdecls, testFops,
	testFTDBApi, stressTest, testAPIErrors
]

for i, test in enumerate(tests):
	print(f"\033[0;33m[{i+1}/{len(tests)}]\033[0m Running {test.__name__} - ", end='')
	sys.stdout.flush()
	timeStart = time.time()
	try:
		test()
		print(f'\033[80D\033[70C- \033[0;32mSUCCESS\033[0m \033[0;36m[{round(time.time() - timeStart, 2):5}s]\033[0m')
	except BaseException as e:
		print(f'\033[80D\033[70C- \033[0;31mFAILED\033[0m  \033[0;36m[{round(time.time() - timeStart, 2):5}s]\033[0m')
		failures += 1
		traceback.print_exc()

gc.collect()
postTestsMemoryUse = getMemUsage()
memoryDiff = (postTestsMemoryUse - preTestsMemoryUse) // 1024 // 1024

print(f"Memory use after running all tests - +{memoryDiff}MB")
# if memoryDiff > 10:
# 	print(f"Error: Leaked {memoryDiff}MB of memory during tests")
# 	failures += 1

if failures == 0:
	print("\033[0;32mSUCCESS\033[0m: All FTDB tests were successful")
	sys.exit(0)
else:
	print("\033[0;31mFAIL\033[0m: Some tests failed")
	sys.exit(1)
