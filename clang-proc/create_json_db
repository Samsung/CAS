#!/usr/bin/env python2

import os
import sys
import subprocess
import multiprocessing
import json
import numpy
import argparse
import traceback
import re
import collections
import jsonast

prog = os.path.realpath(__file__)

if __name__ == "__main__":

	allowed_phases = {"fops": 0, "record": 1, "db": 2}

	parser = argparse.ArgumentParser(description="MAIN_DESCRIPTION", formatter_class=argparse.RawDescriptionHelpFormatter)
	
	# execution control
	parser.add_argument("-p", "--phase", action="store", required=False, help="Phases to execute: %s (default: db)" % (",".join([x[0] for x in allowed_phases])))
	parser.add_argument("-P", "--proc-binary", required=True, action="store", help="Path to the processor binary based on clang")
	parser.add_argument("-j", "--jobs", action="store", type=int, help="Run only with specific number of jobs", required=False)
	parser.add_argument("-Q", "--unique-cdb", action="store_true", help="Make compilation database unique while processing",required=False)
	parser.add_argument("-nm", "--new-merge", required=False, action="store_true", help="Use new version of merging (this is the default as old merging is deprecated)")
	parser.add_argument("-fm", "--fast-merge", required=False, action="store_true", help="Faster merging. Ids for the same objects in database will differ between runs")

	# output control
	parser.add_argument("-q", "--quiet", action="store_true", help="don't print any information on stdout")
	parser.add_argument("-d", "--debug", action="store_true", help="print debug information")
	parser.add_argument("-v", "--verbose", action="store_true", help="print verbose errors")
	parser.add_argument("-f", "--file-logs", action="store", nargs="?", const="db.json.log", type=str, help="Store debug information to file instead of stdout")
	parser.add_argument("-o", "--output", action="store", help="Output file")
	parser.add_argument("-O", "--forward-output", required=False, action="store", help="Store program output to the provided file")
	parser.add_argument("-S", "--clean-slate", action="store_true", help="Remove error (and debug) file(s) and store potential errors (debugs) from scratch",required=False)

	# target info
	parser.add_argument("-V", "--sw-version", required=False, action="store", help="Put information about S/W version to JSON database")
	parser.add_argument("-m", "--module-info", required=False, action="store", help="Put information about module being processed to JSON database")
	parser.add_argument("-C", "--compilation-database", action="store", help="Path to compilation database file (default compile_commands.json file in the current directory", required=False)
	parser.add_argument("-cdm", "--compilation-dependency-map", required=False, action="store", help="Path to compile dependency map file that contains mapping between modules and corresponding source files")
	
	# clang-proc options
	parser.add_argument("-B", "--skip-body", action="store_true", help="skip adding function body to the JSON database")
	parser.add_argument("-W", "--skip-switches", action="store_true", help="skip adding switch/case information the JSON database")
	parser.add_argument("-X", "--skip-defs", action="store_true", help="skip adding type definitions for certain types")
	parser.add_argument("-A", "--with-cta", action="store_true", help="merge compile time asserts into one declaration")
	parser.add_argument("-T", "--taint", action="store", help="add taint information for the function parameters to the JSON database (default: dbtaint.json file in script directory)")
	parser.add_argument("-fu", "--field-usage", required=False, action="store_true", help="Enable field usage information in JSON database (default: True)")
	parser.add_argument("-i", "--include-path", action="store_true", help="Add clang builtin include path to underlying clang processor",required=False)
	parser.add_argument("-L", "--additional-include-paths", action="append", help="Add additional include paths to underlying clang processor",required=False)
	parser.add_argument("-E", "--processor-error", action="store_true", help="pass '-E' option to the underlying processor",required=False)
	parser.add_argument("-DD", "--additional-defines", required=False, action="store", help="Path to JSON file that contains a list of additional preprocessor definitions to pass to all source files")
	parser.add_argument("-mr", "--macro-replacement", required=False, action="store", help="Path to JSON file that describes macro replacement to be done on sources")
	parser.add_argument("-me", "--macro-expansion", required=False, action="store", help="Path to a file that lists macro names to include expansion information in resulting JSON file")
	parser.add_argument("-sa", "--enable-static-assert", required=False, action="store_true", help="Enable printing of static_assert in definitions' code")

	# for debugging
	parser.add_argument("-t", "--test", action="store_true", help="enable test code")
	parser.add_argument("-J", "--job-number", action="store", type=int, help="Perform only specific job number while merging JSON AST", required=False)
	parser.add_argument("-r", "--range", action="store", help="Range of input files to process (e.g. \"0:60\")")
	parser.add_argument("-c", "--compilation-list", action="store", help="List of compiled files to process (by default all unique compiled files from compilation database are processed)", required=False)
	parser.add_argument("-U", "--unmerged-temp", action="store", help="Directory where to store unmerged database files for debugging purposes")
	parser.add_argument("-M", "--only-merge", action="store", help="Only merge chunks from a given directory (for debugging purposes)")
	parser.add_argument("-I", "--save-intermediates", required=False, action="store_true", help="Save intermediate database files while processing")
	parser.add_argument("-u", "--save-chunk-merge-temporary", action="store_true", help="Save temporary files while merging chunks (depends on -U or -M options)")
	parser.add_argument("-e", "--exit-on-error", action="store_true", help="Stop and exit on first error encountered",required=False)

	# deprecated?
	parser.add_argument("-D", "--record-database", action="store", help="Provide record database generated by the record phase")
	parser.add_argument("-F", "--fops-database", action="store", help="Provide fops database generated by the fops phase")
	parser.add_argument("-l", "--parallel-merge", required=False, action="store", nargs="?", type=int, const=0, help="Merge chunks in parallel. Optionally can be followed by max numbers of jobs")
	parser.add_argument("-b", "--only-embed-fops", required=False, action="store_true", help="Skip generation of JSON database, only embed existing fops database")
	parser.add_argument("-R", "--fops-record", required=False, action="append", help="List of record names to look for function pointer initializers")


	args = parser.parse_args()
	sys.exit(jsonast.create_json_db_main(args,allowed_phases))
